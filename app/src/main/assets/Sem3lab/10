ALGORITHM:

Max-Heapify(A, i)

// Input: A: an array where the left and right children of i root heaps (but i may not), i: an array index

// Output: A modified so that i roots a heap

//Running Time: O(log n) where n = heap-size[A] - i

    l ← Left(i)
    r ← Right(i)
    if l ≤ heap-size[A] and A[l] > A[i]
    largest ← l
    else largest ← i
    if r ≤ heap-size[A] and A[r] < A[largest]
    largest ← r
    if largest = i
    exchange A[i] and A[largest]
    Max-Heapify(A, largest)

Max-Heap-Insert(A, key)

//Input: A: an array representing a heap, key: a key to insert

//Output: A modified to include key

//Running Time: O(log n) where n =heap-size[A]

1 .heap-size[A] ←heap-size[A] + 1 2 .A[heap-size[A]] ← -∞ 3 .Heap-Increase-Key(A[heap-size[A]], key)



CODE: heap.c

#include <stdio.h>
#include <stdlib.h>
#define max 20

void ins(int);
void heap(int);
void disp(int);
int f=0,t=1,h[max];

int main()
{
 int n;
 printf("Enter the size of array: ");
 scanf("%d",&n);
 ins(n);
 heap(n);
 disp(n);
 return 0;
 }


//ins function inserts the accepted input to the heap array.

void ins(int n)
{
 int i=0;
 for(;i<n;i++)
 {
     printf("Enter the element: ");
     scanf("%d",&h[i]);
 }
}

// disp funtion is used display the contents of the array after insertion.

void disp(int n)
{
  printf("Displaying elements in heap \n \n");
  int i=0;
  for(;i<n;i++)
   {
     printf("%d ",h[i]);
   }
 printf("\n\n");
 }

// heap fuction is used to insert the accepted input to the heap.

void heap(int n)
{
 int i,v,k=0,j=0,he;
 for(i=n/2;i>=0;i--)
 {
     j=i;
     k=j-1;
     v=h[k];
     he=f;
     while(he==f && (2*k)<=n)
     {
         j=2*k+1;
         if(j<n)
         {
             if(h[j]<h[j+1])
                 j++;
         }
         if(v>=h[j])
             he=t;
         else
         {
             h[k]=h[j];
             k=j;
         }
      }
     h[k]=v;
  }
 }

OUTPUT:
Compilation command : cc heap.c
Output command: ./a.out

Enter the size of array: 7

Enter the element: 10

Enter the element: 2

Enter the element: 5

Enter the element: 15

Enter the element: 30

Enter the element: 1

Enter the element: 40

40 30 10 15 2 1 5