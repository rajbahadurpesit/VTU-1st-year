Algorithm:

1.Read the postfix expression as a string.
2.Scan the expression character by character till the end. Repeat the following operations a. If it is an operand push it onto the stack. b. If it is an operator
3.Pop out two operands from stack
4.Apply the operator onto the popped operands.
5.Store the result back on to the stack.
6.On reaching the end of expression pop out the contents of the stack and display as the result.

Code:

postfixEval.cpp

#include <stdio.h>
#include <string.h>
#include <math.h>
#define MAXSIZE 30
int s[MAXSIZE];
int top=-1;
int isdig(char);
int main()
{
    char symbol,postfix[30];
    int a,b,res,i;
    void push(int);
    int pop();
    int op(int, int, char);
    printf("Postfix expression\n");
    scanf("%s",postfix);
    for(i=0;i<strlen(postfix);i++)
    {
        symbol=postfix[i];
        if(isdig(symbol))
            push(symbol-'0');
        else
        {
            a = pop();
            b = pop();
            res = op(b,a,symbol);
            push(res);
        }
    }
    printf("The result of the expression is = ");
    printf("%d\n",pop());
    return 0;
}
int pop()
{
    if(top!=-1)
        return s[top--];
    else
    {
        printf("Stack underflow\n");
        return 0;
    }
}
void push(int item)
{
    if(top!= MAXSIZE-1)
        s[++top]=item;
    else
        printf("\nStak Overflow\n");
}
int op(int op1,int op2,char symbol)
{
    switch(symbol)
    {
        case '+': return op1 + op2;
        case '-': return op1 - op2;
        case '*': return op1 * op2;
        case '/': return op1 / op2;

    }
}
int isdig(char symbol1)
{
    return (symbol1>='0' && symbol1<='9');
}

Steps for obtaining output:

Steps for checking output-

    Locate the folder in which the file is present in the terminal.
    Execute the command "gcc the "
    Execute ethe command "./a.out"

Output:

**

*Postfix expression

    123*+4-
    The result of the expression is = 3
